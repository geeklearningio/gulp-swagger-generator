{{#unless @root.isSingleFile }}
{{#if @root.options.module }}
module {{@root.options.module}} {
{{/if}}
    "use strict";
{{/unless}}
    export class {{clientName}}{{#if @root.options.generateInterface}} implements I{{clientName}}{{/if}} {
        private baseUri: string;
        private hostName: string;
        private scheme: string;

        /* @ngInject */
        constructor(
            {{#if @root.options.inject}}
            private {{name}}: {{type}},
            {{/if}}
            private $http: angular.IHttpService
        ) {
            this.hostName = '{{#if @root.options.host}}{{@root.options.host}}{{else}}{{api.host}}{{/if}}';
            this.scheme = '{{#if @root.options.scheme}}{{@root.options.scheme}}{{else}}http{{/if}}';
            this.baseUri = this.scheme + '://' + this.hostName {{#api.basePath}}+ '{{.}}'{{/api.basePath}};
        }

    {{#api.operations}}
        /**
        * {{description}}
        {{#args}}
        * @param { {{> Type}} } {{camlCase name}} {{description}}
        {{/args}}
        * @return { {{> Type successsResponse}} } {{successResponse.title}}
        */
        {{lowerCase verb}}{{#pathSegments}}{{#isParam}}By{{/isParam}}{{pascalCase name}}{{/pathSegments}}(
        {{#if @root.options.arguments.asInterface}}
            args: I{{pascalCaseOverwriteCasing verb}}{{#pathSegments}}{{#isParam}}By{{/isParam}}{{pascalCase name}}{{/pathSegments}}Args,
        {{/if}}
        {{#unless @root.options.arguments.asInterface}}
            {{#args}}
                {{camlCase name}}{{#if optional}}?{{/if}}: {{> Type}},
            {{/args}}
        {{/unless}}
            canceller?: angular.IDeferred<any>
        ) : angular.IHttpPromise<{{> Type successResponse}}> {

            var uri = this.baseUri + {{#pathSegments}}{{#isParam}}{{#if @first}}'/' + {{/if}}{{#unless @first}}' + {{/unless}}String({{#if @root.options.arguments.asInterface}}args.{{/if}}{{camlCase name}}){{#unless @last}} + '/{{/unless}}{{/isParam}}{{#unless isParam}}{{#if @first}}'/{{/if}}{{name}}{{#unless @last}}/{{/unless}}{{#if @last}}'{{/if}}{{/unless}}{{/pathSegments}};

            var httpRequestParams: any = {
                method: '{{verb}}',
                url: uri,
                {{#isJsonResponse}}
                json: true,
                {{/isJsonResponse}}
                {{#isBinaryResponse}}
                responseType: 'arraybuffer',
                {{/isBinaryResponse}}
                {{#requestBody}}
                data: {{#if @root.options.arguments.asInterface}}args.{{/if}}{{camlCase name}},
                {{/requestBody}}
                {{#if @root.options.defaultTimeout}}
                timeout: {{@root.options.defaultTimeout}},
                {{/if}}
                params: {
                {{#query}}
                    '{{name}}': {{#if @root.options.arguments.asInterface}}args.{{/if}}{{camlCase name}}{{#unless @last}},{{/unless}}
                {{/query}}
                },
                headers: {
                {{#headers}}
                    '{{name}}': {{#if @root.options.arguments.asInterface}}args.{{/if}}{{camlCase name}}{{#unless @last}},{{/unless}}
                {{/headers}}
                }
            };

        {{#isFormDataRequest}}
            var formData = new FormData();
        {{#formData}}
            {{#getType this}}
            {{#if isFile}}
            formData.append('{{../name}}', new Blob([ {{#if @root.options.arguments.asInterface}}args.{{/if}}{{camlCase ../name }} ], {type: 'application/octet-stream'}));
            {{/if}}
            {{#unless isFile}}
            formData.append('{{../name}}', {{#if @root.options.arguments.asInterface}}args.{{/if}}{{camlCase ../name}});
            {{/unless}}
            {{/getType}}
        {{/formData}}
            httpRequestParams.data = formData;
            httpRequestParams.transformRequest = data => data;
            httpRequestParams.headers['Content-Type'] = undefined;
        {{/isFormDataRequest}}

            if (canceller){
                httpRequestParams.timeout = canceller.promise;
            }

        {{#mapLookup @root.options.security security}}
            {{#configure}}
            httpRequestParams = this.{{.}}(httpRequestParams);
            {{/configure}}
        {{/mapLookup}}

            return this.$http(httpRequestParams);
        }

    {{/api.operations}}
    }
{{#unless @root.isSingleFile }}
{{#if @root.options.module }}
}
{{/if}}
{{/unless}}